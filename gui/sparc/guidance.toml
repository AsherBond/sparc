[project]
name = "SPARC GUI"
description = "Streamlit-based GUI for the SPARC CLI tool"
version = "0.1.0"
framework = "streamlit"
language = "python"
features = [
    "dark-mode",
    "project-management", 
    "code-editing",
    "test-execution",
    "git-integration",
    "settings-management"
]

[specification]
content = """
# SPARC GUI Specification

## Overview
Create a Streamlit-based GUI for the SPARC CLI tool with:

1. User Interface
   - Dark mode theme
   - Sidebar navigation
   - SPARC logo/branding
   - Multiple tabs/sections
   - Settings panel
   - Progress indicators
   - Status messages

2. Core Features
   - Project architecture visualization
   - Component management
   - Test execution interface
   - Code editing capabilities
   - Git integration display
   - Real-time updates

3. Layout Components
   - Main navigation sidebar
   - Top status bar
   - Central content area
   - Settings panel
   - Output/log display
   - Progress indicators

4. Functionality
   - Project initialization
   - Component creation
   - Test execution
   - Code generation
   - Git operations
   - Settings management

5. Technical Requirements
   - Streamlit framework
   - Dark mode styling
   - Responsive design
   - Session state management
   - File system integration
   - Git repository handling

6. User Experience
   - Intuitive navigation
   - Clear feedback
   - Progress indication
   - Error handling
   - Help documentation
   - Keyboard shortcuts
"""

[architecture]
content = """
## Components

### Component: MainApp
- Handles overall application structure
- Manages session state
- Controls navigation flow
- Initializes dark mode
- Sets up sidebar

### Component: ProjectManager
- Manages project initialization
- Handles file operations
- Controls project settings
- Manages Git integration
- Tracks project status

### Component: UIComponents
- Custom Streamlit components
- Styled widgets
- Progress bars
- Status indicators
- Custom layouts

### Component: CodeEditor
- Code editing interface
- Syntax highlighting
- File browser
- Save/load operations
- Version control integration

### Component: TestRunner
- Test execution interface
- Test results display
- Coverage reporting
- Error handling
- Test history

### Component: SettingsManager
- User preferences
- Theme settings
- Project configuration
- API keys management
- Path configurations

### Component: GitIntegration
- Repository status
- Commit interface
- Branch management
- History visualization
- Merge operations
"""

[pseudocode]
content = """
## Main Application Flow

```python
def main():
    initialize_session_state()
    setup_dark_mode()
    create_sidebar()
    
    if page == "Project":
        show_project_page()
    elif page == "Code":
        show_code_editor()
    elif page == "Tests":
        show_test_runner()
    elif page == "Settings":
        show_settings()

def initialize_session_state():
    if 'project' not in st.session_state:
        st.session_state.project = None
    if 'dark_mode' not in st.session_state:
        st.session_state.dark_mode = True

def setup_dark_mode():
    st.markdown(dark_mode_css)
    st.set_page_config(layout="wide")

def create_sidebar():
    with st.sidebar:
        st.image("logo.png")
        st.title("SPARC GUI")
        selected = st.radio("Navigation", 
                          ["Project", "Code", "Tests", "Settings"])
```

## Project Management

```python
def show_project_page():
    st.title("Project Overview")
    
    if not st.session_state.project:
        show_project_init()
    else:
        show_project_status()
        show_components()
        show_git_status()

def show_project_init():
    st.write("Initialize New Project")
    project_path = st.text_input("Project Path")
    if st.button("Create Project"):
        initialize_project(project_path)
```

## Code Editor

```python
def show_code_editor():
    st.title("Code Editor")
    
    files = list_project_files()
    selected_file = st.selectbox("Select File", files)
    
    code = load_file_content(selected_file)
    edited_code = st.text_area("Edit Code", code)
    
    if st.button("Save"):
        save_file_content(selected_file, edited_code)
```

## Test Runner

```python
def show_test_runner():
    st.title("Test Runner")
    
    test_files = list_test_files()
    selected_tests = st.multiselect("Select Tests", test_files)
    
    if st.button("Run Tests"):
        run_tests(selected_tests)
        show_test_results()
```

## Settings Manager

```python
def show_settings():
    st.title("Settings")
    
    with st.form("settings"):
        dark_mode = st.checkbox("Dark Mode", 
                              value=st.session_state.dark_mode)
        git_path = st.text_input("Git Path")
        api_key = st.text_input("API Key", type="password")
        
        if st.form_submit_button("Save Settings"):
            save_settings(dark_mode, git_path, api_key)
```
"""

[refinement]
content = """
# Implementation Refinements

1. User Interface
   - Use custom CSS for dark mode
   - Implement responsive layouts
   - Add keyboard shortcuts
   - Improve error messages
   - Add loading animations

2. Performance
   - Cache file contents
   - Optimize Git operations
   - Lazy load components
   - Background test execution
   - Efficient state management

3. Features
   - Add file search
   - Implement auto-save
   - Add syntax highlighting
   - Support multiple projects
   - Add export options

4. Testing
   - Add unit tests
   - Integration tests
   - UI component tests
   - Performance testing
   - Security testing

5. Documentation
   - User guide
   - API documentation
   - Installation guide
   - Contributing guide
   - Troubleshooting guide
"""

[development]
python_version = ">=3.8"
test_framework = "pytest"
code_style = "black"
type_checker = "mypy"

[dependencies]
required = [
    "streamlit>=1.24.0",
    "pytest>=7.0.0",
    "aider-chat>=0.8.0",
    "rich>=10.0.0",
    "gitpython>=3.1.0"
]
dev = [
    "black",
    "mypy",
    "pytest-cov"
]

[environment]
variables = [
    "OPENAI_API_KEY",
    "ANTHROPIC_API_KEY"
]
config_files = [
    ".env",
    ".aider.conf.yml"
]

[completion]
content = """
# Project Completion Criteria

1. Core Features
   - All components implemented
   - Dark mode working
   - Project management functional
   - Test runner operational
   - Settings management working

2. Testing
   - All unit tests passing
   - Integration tests complete
   - UI tests passing
   - Performance requirements met
   - Security requirements met

3. Documentation
   - All documentation complete
   - User guide finished
   - API docs generated
   - Installation guide done
   - README updated

4. Deployment
   - Package created
   - Dependencies documented
   - Installation tested
   - Release notes written
   - Version tagged

5. Quality Assurance
   - Code review complete
   - Performance verified
   - Security audit done
   - Accessibility checked
   - Cross-platform tested
"""
