# SPARC Framework Guidance Configuration

[project]
framework = "Next.js"
language = "javascript"
features = ['sticky-nav', 'sidebar', 'mobile-view', 'agent-management']

[architecture]
# Component naming conventions
component_style = "PascalCase"
test_prefix = "test_"
source_suffix = ".javascript"
content = """


# Specification.md
```markdown
# Flask Python Web Application Specification

## Project Overview

The objective of this project is to develop a web application using the Flask Python framework that incorporates a sticky top navigation bar, a sidebar, mobile-responsive design, and an agent management system. The application will be built using modern web development practices and technologies, ensuring a seamless user experience across different devices and platforms.

### Core Requirements

1. **Sticky Top Navigation Bar**: The application should feature a sticky top navigation bar that remains visible and accessible to users as they scroll through the content. The navigation bar should provide easy access to the main sections of the application.

2. **Sidebar**: The application should include a sidebar that provides additional navigation options and functionality. The sidebar should be responsive and adapt to different screen sizes, ensuring an optimal user experience on both desktop and mobile devices.

3. **Mobile-Responsive Design**: The application should be designed and developed with a mobile-first approach, ensuring that it is fully responsive and accessible on various devices, including smartphones and tablets. The user interface should adapt seamlessly to different screen sizes and orientations.

4. **Agent Management System**: The application should incorporate an agent management system that allows users to perform various operations related to agents. This may include features such as creating, updating, and deleting agent profiles, assigning tasks or roles, and tracking agent performance.

### Technical Requirements

1. **Framework/Runtime**: The application will be built using the Flask Python framework, which is a lightweight and flexible web framework for Python.

2. **Language**: The primary programming language for the project will be Python, along with HTML, CSS, and JavaScript for the front-end components.

3. **Database Integration**: The application will require integration with a database management system (DBMS) to store and retrieve data related to agents, user profiles, and other application-specific data. The choice of DBMS (e.g., SQLite, PostgreSQL, MySQL) will depend on the project's specific requirements and constraints.

4. **Authentication and Authorization**: The application should implement secure authentication and authorization mechanisms to protect sensitive data and ensure that only authorized users can access and modify agent information.

5. **RESTful API**: The application should expose a RESTful API to facilitate communication between the front-end and back-end components, enabling efficient data exchange and enabling potential integration with other systems or applications.

6. **Responsive Design**: The application should utilize responsive web design techniques, such as CSS media queries and modern CSS frameworks (e.g., Bootstrap), to ensure that the user interface adapts seamlessly to different screen sizes and resolutions.

7. **Testing and Deployment**: The project should include a comprehensive testing strategy, covering unit tests, integration tests, and end-to-end tests. Additionally, the application should be deployed to a production environment, ensuring scalability, security, and performance.

### Constraints and Assumptions

1. **Browser Compatibility**: The application should be compatible with the latest versions of major web browsers, including Chrome, Firefox, Safari, and Edge.

2. **Performance and Scalability**: The application should be designed and developed with performance and scalability in mind, ensuring that it can handle a large number of concurrent users and requests without compromising responsiveness or stability.

3. **Security**: The application should adhere to industry-standard security practices, including secure coding techniques, input validation, and protection against common web vulnerabilities such as SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF).

4. **Accessibility**: The application should comply with accessibility guidelines and standards, such as the Web Content Accessibility Guidelines (WCAG), to ensure that it is usable by individuals with disabilities.

5. **Data Privacy and Compliance**: The application should comply with relevant data privacy and protection regulations, such as the General Data Protection Regulation (GDPR), to ensure the secure handling and storage of user data.

## Detailed Requirements

### Functional Requirements

#### 1. User Authentication and Authorization

- Users should be able to register for a new account or log in using existing credentials.
- The application should implement secure authentication mechanisms, such as password hashing and salting.
- Users should be assigned roles and permissions based on their access level (e.g., admin, manager, agent).
- Authorized users should be able to access and modify agent information based on their assigned roles and permissions.

#### 2. Agent Management

- Authorized users should be able to create, update, and delete agent profiles.
- Agent profiles should include relevant information such as name, contact details, availability, skills, and performance metrics.
- Users should be able to search and filter agents based on various criteria (e.g., location, skills, availability).
- The application should provide a dashboard or overview of all registered agents, displaying key information and performance metrics.

#### 3. Task Management

- The application should allow authorized users to assign tasks or roles to agents.
- Tasks should include details such as description, due date, priority, and assigned agent(s).
- Users should be able to track the progress and status of assigned tasks.
- Agents should be able to view and update the status of their assigned tasks.

#### 4. Reporting and Analytics

- The application should provide reporting and analytics features to track agent performance and productivity.
- Users should be able to generate reports based on various metrics, such as task completion rates, response times, and customer satisfaction ratings.
- The application should provide visualizations and dashboards to help users analyze and interpret data more effectively.

#### 5. Notifications and Communication

- The application should provide a messaging or notification system to facilitate communication between users and agents.
- Users should be able to send notifications or messages to individual agents or groups of agents.
- Agents should receive notifications for new task assignments, updates, or important announcements.

### Non-Functional Requirements

#### 1. Performance and Scalability

- The application should be designed to handle a large number of concurrent users and requests without compromising responsiveness or stability.
- The application should be optimized for performance, including techniques such as caching, code optimization, and efficient database queries.
- The application should be scalable, allowing for easy horizontal scaling (adding more servers) or vertical scaling (upgrading server resources) as needed.

#### 2. Security

- The application should implement industry-standard security practices, including secure coding techniques, input validation, and protection against common web vulnerabilities.
- User authentication and authorization mechanisms should be robust and secure, utilizing techniques such as password hashing, salting, and secure session management.
- The application should protect sensitive data, such as user credentials and agent information, using encryption and secure communication protocols (e.g., HTTPS).

#### 3. Usability and Accessibility

- The user interface should be intuitive, easy to navigate, and consistent across different sections of the application.
- The application should comply with accessibility guidelines and standards, such as the Web Content Accessibility Guidelines (WCAG), to ensure that it is usable by individuals with disabilities.
- The application should provide clear and concise error messages, help documentation, and user support resources.

#### 4. Maintainability and Extensibility

- The application should be designed and developed using modular and reusable code, following best practices and design patterns.
- The codebase should be well-documented, with clear comments and explanations to facilitate future maintenance and development.
- The application should be extensible, allowing for the easy addition of new features or integration with third-party services or APIs.

#### 5. Deployment and Monitoring

- The application should be deployed to a production environment that is secure, reliable, and scalable.
- The deployment process should be automated and streamlined, allowing for easy updates and rollbacks.
- The application should include monitoring and logging mechanisms to track performance, identify issues, and facilitate debugging and troubleshooting.

### Constraints and Assumptions

1. **Development Team**: The development team consists of experienced Python and web developers with knowledge of the Flask framework and modern web development practices.

2. **Development Environment**: The development will be carried out on Linux or macOS environments, with the necessary tools and dependencies installed (e.g., Python, Flask, database management system, version control system).

3. **Third-Party Libraries and Frameworks**: The project may leverage third-party libraries and frameworks for specific functionalities, such as authentication, data visualization, or API development. These dependencies should be carefully evaluated and documented.

4. **Deployment Environment**: The application will be deployed to a cloud-based hosting platform or a dedicated server environment, with the necessary infrastructure and configurations in place.

5. **Data Storage**: The application will require a database management system (DBMS) to store and retrieve data related to agents, user profiles, and other application-specific data. The choice of DBMS will depend on the project's specific requirements and constraints.

6. **Compliance and Regulations**: The application must comply with relevant data privacy and protection regulations, such as the General Data Protection Regulation (GDPR), and any industry-specific regulations or guidelines.

7. **User Testing and Feedback**: User testing and feedback will be conducted throughout the development process to ensure that the application meets the needs and expectations of the target audience.

## Conclusion

This specification document provides a comprehensive overview of the requirements, constraints, and assumptions for the Flask Python web application with a sticky top navigation bar, sidebar, mobile-responsive design, and an agent management system. It serves as a guide for the development team, ensuring that the application meets the desired functionality, performance, security, and usability standards. Regular reviews and updates to this document may be necessary as the project progresses to accommodate any changes or new requirements that arise during the development process.

```

# Architecture.md
# Flask Python Software Architecture

## System Components

1. **Core Services**:
   - **Web Application**: The primary Flask application responsible for handling HTTP requests, rendering templates, and managing application logic.
   - **Authentication Service**: Handles user authentication, authorization, and session management.
   - **Agent Management Service**: Manages the lifecycle of agents, including registration, assignment, and monitoring.

2. **Data Layer**:
   - **Database**: A relational database management system (RDBMS) like PostgreSQL or MySQL to store application data.
   - **Object-Relational Mapping (ORM)**: An ORM library like SQLAlchemy to abstract the database operations and provide a Pythonic way to interact with the database.

3. **External Integrations**:
   - **Notification Service**: A third-party service or library for sending notifications (e.g., email, SMS) to agents or administrators.
   - **Logging Service**: A centralized logging service or library for collecting and analyzing application logs.

## Component Interactions

1. **Service Communication**:
   - The Flask web application acts as the central component, orchestrating the interactions between various services.
   - The Authentication Service is responsible for authenticating users and managing their sessions.
   - The Agent Management Service handles all operations related to agents, such as registration, assignment, and monitoring.
   - The Web Application communicates with the Data Layer (Database and ORM) to persist and retrieve data.
   - The Web Application integrates with external services like the Notification Service and Logging Service through their respective APIs or libraries.

2. **Data Flow**:
   - User requests are received by the Flask web application.
   - The Authentication Service validates the user's credentials and manages the session.
   - For authenticated requests, the Web Application interacts with the Agent Management Service to perform the requested operations.
   - The Agent Management Service communicates with the Data Layer (Database and ORM) to store, retrieve, or update agent-related data.
   - The Web Application renders the appropriate templates or JSON responses based on the request and data retrieved from the services.
   - Notifications or log events may be sent to the respective external services (Notification Service and Logging Service) as needed.

3. **API Contracts**:
   - The Flask web application exposes a RESTful API for client applications to interact with the system.
   - The API contracts are defined using a standard like OpenAPI (Swagger) or API Blueprint, specifying the endpoints, request/response formats, and data models.
   - The API contracts are versioned and maintained alongside the codebase to ensure compatibility and documentation.

## Data Flow

1. **Input Processing**:
   - User input from web forms or API requests is validated and sanitized to prevent security vulnerabilities like SQL injection or cross-site scripting (XSS).
   - Input validation can be performed using Flask's built-in request handling mechanisms or external libraries like WTForms or Cerberus.

2. **Data Transformation**:
   - Data received from external sources (e.g., third-party APIs) or user input may need to be transformed or mapped to the application's data models.
   - Data transformation logic can be encapsulated in separate modules or classes for better code organization and reusability.

3. **Storage Patterns**:
   - The application data is persisted in the relational database using the ORM (SQLAlchemy).
   - Database migrations are managed using a tool like Alembic or Flask-Migrate to ensure consistent schema updates across environments.
   - Caching mechanisms like Flask-Caching or Redis can be employed to improve performance for frequently accessed or computationally expensive data.

## Key Design Decisions

1. **Technology Choices**:
   - **Flask**: A lightweight and flexible Python web framework chosen for its simplicity and extensibility.
   - **SQLAlchemy**: A robust and widely-used ORM library for Python, providing an abstraction layer over the database and supporting various database engines.
   - **PostgreSQL/MySQL**: Reliable and performant open-source relational database management systems.
   - **Flask-Login**: A Flask extension for handling user authentication and session management.
   - **Flask-RESTful**: An extension for building RESTful APIs with Flask.
   - **Gunicorn**: A production-grade WSGI server for running Flask applications with high performance and concurrency.

2. **Architectural Patterns**:
   - **Model-View-Controller (MVC)**: The application follows the MVC architectural pattern, separating concerns between data models, user interfaces (views), and application logic (controllers).
   - **Service-Oriented Architecture (SOA)**: The application is decomposed into separate services (e.g., Authentication Service, Agent Management Service) for better modularity, scalability, and maintainability.
   - **Repository Pattern**: The Data Layer follows the Repository pattern, providing an abstraction over the data access logic and separating it from the business logic.

3. **Security Measures**:
   - **HTTPS**: The application is served over HTTPS to ensure secure communication and data encryption.
   - **Authentication and Authorization**: User authentication and authorization mechanisms are implemented using Flask-Login or a custom solution.
   - **Input Validation**: User input is validated and sanitized to prevent security vulnerabilities like SQL injection and XSS.
   - **Secure Headers**: Security-related HTTP headers (e.g., X-XSS-Protection, Content-Security-Policy) are set to enhance the application's security posture.
   - **Logging and Monitoring**: Comprehensive logging and monitoring mechanisms are implemented to detect and respond to security incidents or anomalies.

## File and Folder Structure

```
flask-app/
├── app/
│   ├── __init__.py
│   ├── models/
│   │   ├── __init__.py
│   │   ├── user.py
│   │   ├── agent.py
│   │   └── ...
│   ├── views/
│   │   ├── __init__.py
│   │   ├── auth.py
│   │   ├── agents.py
│   │   └── ...
│   ├── services/
│   │   ├── __init__.py
│   │   ├── auth_service.py
│   │   ├── agent_service.py
│   │   └── ...
│   ├── utils/
│   │   ├── __init__.py
│   │   ├── decorators.py
│   │   ├── helpers.py
│   │   └── ...
│   ├── static/
│   │   ├── css/
│   │   ├── js/
│   │   └── ...
│   └── templates/
│       ├── layout.html
│       ├── auth/
│       ├── agents/
│       └── ...
├── migrations/
│   ├── env.py
│   ├── alembic.ini
│   ├── script.py.mako
│   └── versions/
├── tests/
│   ├── __init__.py
│   ├── test_auth.py
│   ├── test_agents.py
│   └── ...
├── config.py
├── requirements.txt
├── wsgi.py
└── manage.py
```

- `app/`: The main application package.
  - `__init__.py`: Initializes the Flask application and registers blueprints, extensions, and configurations.
  - `models/`: Contains the data models (e.g., User, Agent) defined using SQLAlchemy.
  - `views/`: Contains the application's views (routes) and controllers, organized into separate modules (e.g., auth.py, agents.py).
  - `services/`: Contains the application's services (e.g., AuthService, AgentService) responsible for business logic and data processing.
  - `utils/`: Contains utility functions, decorators, and helper modules used across the application.
  - `static/`: Serves static files (CSS, JavaScript, images) for the web application.
  - `templates/`: Contains the Jinja2 templates for rendering HTML pages.
- `migrations/`: Contains database migration scripts managed by Alembic or Flask-Migrate.
- `tests/`: Contains unit and integration tests for the application.
- `config.py`: Defines configuration settings for different environments (development, production, testing).
- `requirements.txt`: Lists the Python dependencies required by the application.
- `wsgi.py`: Entry point for the WSGI server (Gunicorn) to run the Flask application.
- `manage.py`: A command-line interface for managing the application (e.g., running the development server, executing database migrations).

This structure follows the recommended best practices for Flask applications, separating concerns, and promoting code organization and maintainability.
"""

# Directory structure
src_dir = "src"
test_dir = "tests"
docs_dir = "docs"

[implementation]
# Code generation settings
max_attempts = 3
test_first = true
type_hints = true

# Documentation requirements
require_docstrings = true
doc_style = "Google"

[testing]
# Testing requirements
min_coverage = 80
unit_test_required = true
integration_test_required = true

[quality]
# Code quality requirements
max_complexity = 10
max_line_length = 100
require_type_hints = true

[security]
# Security requirements
require_input_validation = true
require_authentication = true
require_authorization = true

[performance]
# Performance requirements
max_response_time_ms = 500
max_memory_usage_mb = 512
enable_caching = true

[deployment]
# Deployment requirements
containerize = true
ci_cd_required = true
monitoring_required = true

[documentation]
# Documentation requirements
readme_required = true
api_docs_required = true
architecture_docs_required = true
