# SPARC Framework Guidance Configuration

[project]
framework = "None"
language = "None"
features = []

[architecture]
# Component naming conventions
component_style = "PascalCase"
test_prefix = "test_"
source_suffix = ".None"
content = """


# Specification.md
```markdown
# Project Specification: Next.js View and Agent Management System with Sticky Top Nav and Sidebar

## Project Overview
The goal of this project is to develop a web application using Next.js, a React framework for server-side rendering (SSR) and static site generation (SSG). The application will provide a comprehensive view and agent management system with a sticky top navigation bar and a sidebar for enhanced user experience. The target audience includes businesses and organizations that require efficient management of their agents or representatives.

## Core Requirements
1. **User Authentication and Authorization**
   - Implement a secure user authentication system with role-based access control (RBAC).
   - Support user registration, login, password reset, and account management.

2. **View Management**
   - Allow authorized users to create, read, update, and delete views.
   - Views should be categorized and searchable based on various criteria.
   - Provide a user-friendly interface for managing view details, such as name, description, and associated agents.

3. **Agent Management**
   - Enable authorized users to create, read, update, and delete agents.
   - Allow assigning agents to specific views.
   - Provide a comprehensive agent profile with details such as name, contact information, and performance metrics.

4. **Sticky Top Navigation Bar**
   - Implement a sticky top navigation bar that remains visible as the user scrolls through the application.
   - The navigation bar should provide quick access to core features and functionality.

5. **Sidebar**
   - Incorporate a sidebar that displays relevant information and navigation options based on the user's role and context.
   - The sidebar should be responsive and adapt to different screen sizes.

6. **Mobile Responsiveness**
   - Ensure the application is fully responsive and optimized for mobile devices.
   - Implement appropriate design patterns and techniques for optimal user experience across various screen sizes and resolutions.

## Technical Requirements
1. **Next.js Framework**
   - Leverage Next.js for server-side rendering and static site generation.
   - Utilize Next.js features like file-based routing, API routes, and static site optimization.

2. **React**
   - Use React as the core library for building user interfaces.
   - Implement reusable and modular components following best practices.

3. **State Management**
   - Implement a robust state management solution using a library like Redux or React Context API.
   - Manage application state effectively, including user authentication, view data, and agent data.

4. **Backend Integration**
   - Integrate with a backend API or database for data storage and retrieval.
   - Implement secure communication between the client and backend using industry-standard protocols (e.g., HTTPS, JWT).

5. **CSS/UI Library**
   - Utilize a modern CSS-in-JS library or a UI component library like Material-UI or Ant Design for consistent styling and responsive design.

6. **Testing**
   - Implement unit tests for React components and other application logic using testing frameworks like Jest and React Testing Library.
   - Consider end-to-end testing using tools like Cypress or Selenium for comprehensive application testing.

7. **Performance Optimization**
   - Optimize the application for performance by leveraging Next.js features like code splitting, image optimization, and static site generation.
   - Implement lazy loading and code splitting techniques to improve initial load times.

8. **Accessibility**
   - Ensure the application adheres to Web Content Accessibility Guidelines (WCAG) and provides an inclusive experience for users with disabilities.

9. **Deployment and Continuous Integration/Continuous Deployment (CI/CD)**
   - Set up a CI/CD pipeline for automated testing, building, and deployment.
   - Deploy the application to a hosting platform like Vercel, Netlify, or a custom server environment.

## Constraints and Assumptions
1. **Security**
   - Implement industry-standard security practices, including input validation, sanitization, and protection against common web vulnerabilities (e.g., XSS, CSRF).
   - Ensure compliance with relevant data privacy regulations and guidelines (e.g., GDPR, CCPA).

2. **Scalability**
   - Design the application to handle increasing user loads and data volumes.
   - Consider implementing caching mechanisms and load balancing strategies as needed.

3. **Third-Party Integrations**
   - Identify and document any required third-party integrations (e.g., email services, analytics, payment gateways).
   - Ensure compatibility and adherence to the respective API guidelines and terms of service.

4. **Browser Compatibility**
   - Ensure the application is compatible with the latest versions of major web browsers (e.g., Chrome, Firefox, Safari, Edge).
   - Provide graceful degradation or appropriate fallbacks for older browser versions.

5. **Localization and Internationalization**
   - Consider the potential need for localization and internationalization, including support for multiple languages and date/time formats.

6. **Maintenance and Extensibility**
   - Develop the application with maintainability and extensibility in mind.
   - Implement modular and reusable components, follow coding standards, and document the codebase thoroughly.

## Development and Testing Process
1. **Agile Methodology**
   - Adopt an Agile development methodology, such as Scrum or Kanban, to facilitate iterative development and continuous feedback.
   - Conduct regular sprint planning, daily stand-ups, and retrospective meetings.

2. **Version Control**
   - Use a version control system like Git for code management and collaboration.
   - Establish branching and merging strategies, and follow best practices for code reviews and merging.

3. **Continuous Integration (CI)**
   - Set up a CI pipeline to automatically build, test, and validate the codebase on every commit or pull request.
   - Implement linting, code formatting, and static code analysis as part of the CI process.

4. **Testing**
   - Develop comprehensive unit tests for individual components and application logic.
   - Implement integration tests to verify the correct integration of various application modules.
   - Conduct end-to-end (E2E) tests to simulate real-user scenarios and validate the application's behavior.
   - Maintain a high level of test coverage and automate the testing process as much as possible.

5. **Staging and Production Environments**
   - Set up separate staging and production environments for testing and deployment.
   - Implement a staging environment for testing new features, bug fixes, and performing user acceptance testing (UAT).
   - Deploy the application to the production environment after successful testing and approval.

6. **Monitoring and Logging**
   - Implement monitoring and logging mechanisms to track application performance, errors, and user behavior.
   - Utilize tools like Sentry, New Relic, or Datadog for monitoring and error tracking.
   - Implement logging strategies to aid in debugging and troubleshooting.

7. **Documentation**
   - Maintain comprehensive documentation throughout the development process.
   - Document code, architecture decisions, deployment processes, and other relevant information.
   - Consider using tools like Storybook or Docusaurus for component documentation and styleguides.

8. **Collaboration and Communication**
   - Establish clear communication channels and collaboration practices among team members.
   - Utilize project management tools like Jira, Trello, or Asana for task tracking and progress monitoring.
   - Conduct regular code reviews and knowledge-sharing sessions to ensure code quality and team alignment.

By following this comprehensive specification, the development team can ensure a consistent and structured approach to building the Next.js View and Agent Management System with a sticky top nav and sidebar, while adhering to best practices and industry standards.
```

# Architecture.md
# NextJS Architecture for Agent Management System

## System Components

### Core Services

1. **User Authentication Service**: Responsible for handling user authentication and authorization, including login, registration, and role-based access control (RBAC).

2. **Agent Management Service**: Handles the creation, retrieval, update, and deletion (CRUD) operations for agents, including their profiles, assignments, and performance metrics.

3. **View Management Service**: Manages the creation, retrieval, update, and deletion of views, which are customizable dashboards or interfaces for agents and administrators.

4. **Notification Service**: Handles the delivery of notifications and alerts to agents and administrators, such as new assignments, performance updates, or system events.

5. **Reporting Service**: Generates reports and analytics based on agent performance data, customer interactions, and other relevant metrics.

### Data Layer

1. **User Database**: Stores user information, including authentication credentials, roles, and permissions.

2. **Agent Database**: Stores agent profiles, assignments, performance metrics, and other relevant data.

3. **View Database**: Stores the configurations and settings for different views tailored for agents and administrators.

4. **Audit Log Database**: Maintains a log of all user actions, system events, and data changes for auditing and compliance purposes.

### External Integrations

1. **Customer Relationship Management (CRM) Integration**: Integrates with third-party CRM systems to synchronize customer data and interactions.

2. **Communication Channels Integration**: Integrates with various communication channels (e.g., email, chat, voice) to facilitate agent-customer interactions.

3. **Analytics and Reporting Tools Integration**: Integrates with external analytics and reporting tools for advanced data analysis and visualization.

## Component Interactions

1. **User Authentication Service**:
   - Interacts with the User Database to authenticate users and manage their credentials.
   - Provides authentication tokens and user information to other services for authorization purposes.

2. **Agent Management Service**:
   - Interacts with the Agent Database for CRUD operations on agent data.
   - Communicates with the Notification Service to send notifications to agents and administrators.
   - Integrates with the CRM system to synchronize customer data and interactions.

3. **View Management Service**:
   - Interacts with the View Database to manage view configurations and settings.
   - Retrieves data from the Agent Database and other relevant data sources to populate views.

4. **Notification Service**:
   - Receives notifications from other services (e.g., Agent Management Service, Reporting Service).
   - Delivers notifications to agents and administrators through various channels (e.g., email, push notifications, in-app notifications).

5. **Reporting Service**:
   - Retrieves data from the Agent Database, Audit Log Database, and other relevant data sources.
   - Generates reports and analytics based on the retrieved data.
   - Integrates with external analytics and reporting tools for advanced analysis and visualization.

## Data Flow

1. **User Authentication**:
   - User credentials (username/email and password) are sent to the User Authentication Service.
   - The User Authentication Service verifies the credentials against the User Database.
   - Upon successful authentication, an authentication token is generated and returned to the client.

2. **Agent Management**:
   - Agent data (e.g., profiles, assignments, performance metrics) is sent to the Agent Management Service.
   - The Agent Management Service processes the data and interacts with the Agent Database for CRUD operations.
   - Relevant data is synchronized with the CRM system for customer interactions.
   - Notifications are sent to the Notification Service for delivery to agents and administrators.

3. **View Management**:
   - View configuration and settings are managed by the View Management Service, interacting with the View Database.
   - The View Management Service retrieves data from the Agent Database and other relevant data sources to populate the views.
   - Rendered views are sent to the client for display.

4. **Reporting and Analytics**:
   - The Reporting Service retrieves data from the Agent Database, Audit Log Database, and other relevant data sources.
   - Reports and analytics are generated based on the retrieved data.
   - Optionally, external analytics and reporting tools are integrated for advanced analysis and visualization.

## Key Design Decisions

1. **Technology Choices**:
   - **NextJS**: A React framework for building server-side rendered (SSR) and static site generation (SSG) applications, providing improved performance and SEO benefits.
   - **React**: A popular JavaScript library for building user interfaces, enabling component-based architecture and efficient rendering.
   - **Node.js**: A JavaScript runtime environment for server-side development, enabling efficient handling of asynchronous operations and scalability.
   - **MongoDB**: A NoSQL database for storing and retrieving unstructured data, providing flexibility and scalability for the application's data requirements.
   - **Redis**: An in-memory data store for caching and real-time data processing, improving application performance and responsiveness.

2. **Architectural Patterns**:
   - **Microservices Architecture**: The application is decomposed into smaller, independently deployable services, each responsible for a specific business capability (e.g., User Authentication Service, Agent Management Service, View Management Service).
   - **Event-Driven Architecture**: Services communicate with each other through asynchronous events, promoting loose coupling and scalability.
   - **API Gateway Pattern**: An API gateway acts as a single entry point for client requests, routing them to the appropriate services and handling cross-cutting concerns (e.g., authentication, rate limiting, caching).

3. **Security Measures**:
   - **Authentication and Authorization**: Implemented through the User Authentication Service, ensuring secure access to the application and its features based on user roles and permissions.
   - **API Security**: Secure communication between services and clients through protocols like HTTPS, API keys, and JSON Web Tokens (JWT).
   - **Data Encryption**: Sensitive data (e.g., user credentials, personal information) is encrypted at rest and in transit using industry-standard encryption algorithms.
   - **Input Validation and Sanitization**: All user input is validated and sanitized to prevent security vulnerabilities like SQL injection, cross-site scripting (XSS), and other injection attacks.
   - **Audit Logging**: User actions, system events, and data changes are logged in the Audit Log Database for auditing and compliance purposes.

## File and Folder Structure

```
/src
  /components
    /common
      Header.js
      Sidebar.js
      Footer.js
    /auth
      LoginForm.js
      RegisterForm.js
    /agents
      AgentList.js
      AgentProfile.js
      AgentPerformance.js
    /views
      ViewManager.js
      ViewBuilder.js
  /services
    /auth
      authService.js
    /agents
      agentService.js
    /views
      viewService.js
    /notifications
      notificationService.js
    /reporting
      reportingService.js
  /pages
    /auth
      login.js
      register.js
    /agents
      index.js
      [id].js
    /views
      index.js
      [id].js
    /reports
      index.js
  /utils
    apiClient.js
    dataTransformers.js
    constants.js
  /styles
    global.css
    components.css
  /public
    /assets
      logo.png
      favicon.ico
  next.config.js
  package.json
```

### Components

- `components/common`: Contains common UI components used across the application, such as the header, sidebar, and footer.
- `components/auth`: Contains components related to user authentication, such as login and registration forms.
- `components/agents`: Contains components for displaying and managing agent data, such as agent lists, profiles, and performance metrics.
- `components/views`: Contains components for managing and building custom views for agents and administrators.

### Services

- `services/auth`: Handles user authentication and authorization.
- `services/agents`: Manages CRUD operations for agents, including retrieving agent data and integrating with the CRM system.
- `services/views`: Manages CRUD operations for custom views, including retrieving view configurations and populating view data.
- `services/notifications`: Handles the delivery of notifications and alerts to agents and administrators.
- `services/reporting`: Generates reports and analytics based on agent performance data and other relevant metrics.

### Pages

- `pages/auth`: Contains pages for user authentication, such as login and registration.
- `pages/agents`: Contains pages for displaying and managing agent data, such as agent lists and individual agent profiles.
- `pages/views`: Contains pages for managing and displaying custom views for agents and administrators.
- `pages/reports`: Contains pages for displaying reports and analytics related to agent performance and other relevant metrics.

### Utils

- `utils/apiClient.js`: A utility module for making API requests to the backend services.
- `utils/dataTransformers.js`: Contains functions for transforming and formatting data between the client and server.
- `utils/constants.js`: Defines constants and configuration values used throughout the application.

### Styles

- `styles/global.css`: Contains global styles for the application.
- `styles/components.css`: Contains styles specific to individual components.

### Public

- `public/assets`: Contains static assets such as images and icons used in the application.

### Configuration

- `next.config.js`: Contains configuration settings for the NextJS application.
- `package.json`: Defines the project dependencies and scripts for building and running the application.
"""

# Directory structure
src_dir = "src"
test_dir = "tests"
docs_dir = "docs"

[implementation]
# Code generation settings
max_attempts = 3
test_first = true
type_hints = true

# Documentation requirements
require_docstrings = true
doc_style = "Google"

[testing]
# Testing requirements
min_coverage = 80
unit_test_required = true
integration_test_required = true

[quality]
# Code quality requirements
max_complexity = 10
max_line_length = 100
require_type_hints = true

[security]
# Security requirements
require_input_validation = true
require_authentication = true
require_authorization = true

[performance]
# Performance requirements
max_response_time_ms = 500
max_memory_usage_mb = 512
enable_caching = true

[deployment]
# Deployment requirements
containerize = true
ci_cd_required = true
monitoring_required = true

[documentation]
# Documentation requirements
readme_required = true
api_docs_required = true
architecture_docs_required = true
